name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

  # Allow running manually from Actions tab
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to review manually"
        required: false
      pr_branch:
        description: 'Branch name of the PR'
        required: false
permissions:
  pull-requests: write
  contents: read
  
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine PR and base branch
        id: prinfo
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            if [ -z "$PR_NUMBER" ]; then
              echo "❌ You must provide a PR number when running manually."
              exit 1
            fi
            BASE_REF=$(gh pr view $PR_NUMBER --json baseRefName -q .baseRefName)
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "base_ref=$BASE_REF" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "base_ref=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR diff
        id: diff
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git fetch origin pull/${{ steps.prinfo.outputs.pr_number }}/head:pr_branch
            git fetch origin ${{ steps.prinfo.outputs.base_ref }}:base_branch
            git diff base_branch...pr_branch > pr_diff.txt
          else
            git fetch origin ${{ steps.prinfo.outputs.base_ref }} --depth=1
            git diff origin/${{ steps.prinfo.outputs.base_ref }}...HEAD > pr_diff.txt
          fi
          echo "✅ Diff generated:"
          head -n 20 pr_diff.txt || true
          
      - name: Prepare PR diff content
        id: prdiff
        run: |
          # Escape the diff to be JSON safe
          DIFF_CONTENT=$(jq -Rs . < pr_diff.txt)
          DIFF_CONTENT=${DIFF_CONTENT%\"}
          DIFF_CONTENT=${DIFF_CONTENT#\"}
          echo "diff_content=$DIFF_CONTENT" >> $GITHUB_OUTPUT
          echo $DIFF_CONTENT

      - name: Read CODEGUIDELINE
        id: guideline
        run: |
          if [ -f CODEGUIDELINE ]; then
            echo "GUIDELINE<<EOF" >> $GITHUB_ENV
            cat CODEGUIDELINE >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "GUIDELINE<<EOF" >> $GITHUB_ENV
            echo "No project-specific guideline found." >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Run AI review
        id: ai_review
        run: |
          RESPONSE=$(curl https://api.openai.com/v1/chat/completions \
            -s \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d '{
              "model": "gpt-4o-mini",
              "messages": [
                {
                  "role": "system",
                  "content": "You are a strict senior engineer. Perform a code review."
                },
                {
                  "role": "user",
                  "content": "Here are the project coding guidelines:\n${{ env.GUIDELINE }}"
                },
                {
                  "role": "user",
                  "content": "Here is the pull request diff:\n\"\"\"${{ steps.prdiff.outputs.diff_content }}\"\"\""
                },
                {
                  "role": "user",
                  "content": "In addition to enforcing the guidelines, also give feedback on general code quality, readability, maintainability, and potential bugs."
                }
              ],
              "max_tokens": 800
            }')
          echo "Raw API Response:"
          echo "$RESPONSE"
          REVIEW=$(echo $RESPONSE | jq -r '.choices[0].message.content')

          echo "Extracted Review:"
          echo "$REVIEW"
            
            
          echo "REVIEW<<EOF" >> $GITHUB_ENV
          echo "$REVIEW" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post review as PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          # pr-number: ${{ steps.prinfo.outputs.pr_number }}
          number: ${{ github.event.inputs.pr_number }}
          message: |
            🤖 **AI Code Review**
            ${{ env.REVIEW }}
